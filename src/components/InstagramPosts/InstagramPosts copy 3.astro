---
import { Icon } from 'astro-icon';
import { getPosts } from '../../services/posts';

const posts = await getPosts();

const instaPost = posts.filter(post => post.sections.includes('instagram'));
console.log("instaPost", instaPost);
---

<div class="bg-secondary">
  <h2 class="text-center text-3xl py-12 text-slate-50">Ãšltimas publicaciones en Instagram</h2>

  <section class="insta-container">
    <div class="slider-wrapper">
      <button id="prev-slide" class="slide-button">   
        <Icon
          name="mdi:chevron-left"
        />
      </button>
      <div
        id="image-list"
        class="image-list"
      >
      {instaPost.map(post => (
          <img class='image-item' loading='lazy' src={`${post.image}`} alt='' />
      ))}
      </div>
      <button id="next-slide" class="slide-button">   
        <Icon
          name="mdi:chevron-right"
        />
      </button>
    </div>
    <div class="slider-scrollbar">
      <div class="scrollbar-track">
        <div class="scrollbar-thumb"></div>
      </div>
    </div>
  </section>
</div>

<style is:inline>

  .insta-container {
    width: 95%;
    margin: 0 auto;
  }

  .slider-wrapper {
    position: relative;
  }

  .slider-wrapper .slide-button {
    position: absolute;
    top: 50%;
    height: 50px;
    width: 50px;
    color: #fff;
    border: none;
    outline: none;
    background: #000;
    font-size: 2.2rem;
    cursor: pointer;
    border-radius: 50%;
    transform: translateY(-50%);
  }

  .slider-wrapper .slide-button:hover {
    background: #444;
  }

  .slider-wrapper .slide-button#prev-slide {
    left: -20px;
    display: none;
  }
  .slider-wrapper .slide-button#next-slide {
    right: -20px;
  }

  .slider-wrapper .image-list {
    display: flex;
    gap: 18px;
    font-size: 0;
    margin-bottom: 30px;
    overflow-x: auto;
    scrollbar-width: none;
  }
  
  .slider-wrapper .image-list::-webkit-scrollbar {
    display: none;
  }

  .slider-wrapper .image-list .image-item {
    /* width: 325px; */
    height: 350px;
    object-fit: contain;
  }


  .insta-container .slider-scrollbar {
    height: 24px;
    width: 100%;
    display: flex;
    align-items: center;
  }
  .slider-scrollbar .scrollbar-track {
    height: 2px;
    width: 100%;
    background: #ccc;
    position: relative;
    border-radius: 4px;
  }

  .slider-scrollbar:hover .scrollbar-track {
    height: 4px;
  }

  .slider-scrollbar .scrollbar-thumb {
    position: absolute;
    height: 100%;
    width: 50%;
    background: #000;
    border-radius: inherit;
    cursor: grab;
  }

  .slider-scrollbar .scrollbar-thumb:active {
    cursor: grabbing;
    height: 8px;
    top: -2px;
  }
  .slider-scrollbar .scrollbar-thumb::after {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    top:-10px;
    bottom: top:-10px;
  }
  @media (max-width: 1023px) {
    .slider-wrapper .slide-button {
      display: none !important;
    }

    .slider-wrapper .image-list {
      gap: 10px;
      margin-bottom: 15px;
    }

    .slider-wrapper .image-list .image-item {
      width: 280px; 
      height: 380px;
      object-fit: contain; 
    }
    .slider-scrollbar ,.scrollbar-thumb {
      width: 20%;
    }

  }
</style>
<script>
 
  const imageList = document.querySelector('#image-list');

  const slideButtons = document.querySelectorAll<HTMLElement>('.slider-wrapper .slide-button') ;
  const sliderScrollbar = document.querySelector('.insta-container .slider-scrollbar') ;
  const scrollbarThumb = sliderScrollbar.querySelector('.scrollbar-thumb') as HTMLElement;
  const maxScrollLeft = imageList.scrollWidth - imageList.clientWidth;

  scrollbarThumb.addEventListener("mousedown", (e) => {
    const startX = e.clientX;
    const thumbPosition = scrollbarThumb.offsetLeft;

    // Update thumb position on mouse move
    const handleMouseMove = (e) => {
      const deltaX = e.clientX - startX;
      const newThumbPosition = thumbPosition + deltaX;
      const maxThumbPosition = sliderScrollbar.getBoundingClientRect().width - scrollbarThumb.offsetWidth;

      const boundedPosition = Math.max(0, Math.min(maxThumbPosition, newThumbPosition));
      const scrollPosition = (boundedPosition / maxThumbPosition) * maxScrollLeft;
      scrollbarThumb.style.left = `${boundedPosition}px`;
      imageList.scrollLeft = scrollPosition;
    }

    // Remove eventListeners on mouse up
    const handleMouseUp = () => {
      document.removeEventListener("mousemove", handleMouseMove);
      document.removeEventListener("mouseup", handleMouseUp);
    }
    document.addEventListener("mousemove", handleMouseMove);
    document.addEventListener("mouseup", handleMouseUp);
  })

  // Slide images according to the slide buttons click
  slideButtons.forEach(button=> {
    button.addEventListener('click', () => {
      const direction = button.id === "prev-slide" ? -1 :  +1;
      const scrollAmount = imageList.clientWidth * direction;
      imageList.scrollBy({left: scrollAmount, behavior: "smooth" });
    })
  })

  const handleSlideButtons = () => {
    slideButtons[0].style.display = imageList.scrollLeft <=0 ? 'none' : 'block';
    slideButtons[1].style.display = imageList.scrollLeft >=maxScrollLeft ? 'none' : 'block';
  }

  // Uupdate scollbar thumb position based on image scroll
  const updateScrollThumbPosition = () => {
    const scrollPosition = imageList.scrollLeft;
    const thumbPosition = (scrollPosition / maxScrollLeft) * (sliderScrollbar.clientWidth - scrollbarThumb.offsetWidth);
    scrollbarThumb.style.left = `${thumbPosition}px`;
  }

  imageList.addEventListener("scroll", () => {
    handleSlideButtons();
    updateScrollThumbPosition();
  } )
</script>
