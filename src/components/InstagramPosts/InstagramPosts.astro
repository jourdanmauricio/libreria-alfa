---
import { Icon } from 'astro-icon';
import { getPosts } from '../../services/posts';

const posts = await getPosts();

const instaPost = posts.filter((post) => post.sections.includes('instagram'));
---

<div class="bg-secondary">
  <h2 class="text-center text-3xl py-12 text-slate-50">
    Ãšltimas publicaciones en Instagram
  </h2>

  <section class="w-11/12 mx-auto">
    <div class="relative">
      <button
        id="prev-slide"
        class="absolute top-1/2 h-12 w-12 text-white border-none outline-none bg-black text-4xl cursor-pointer rounded-full -translate-y-1/2 hover:bg-gray-800 hidden -left-5 slide-button z-10"
      >
        <Icon name="mdi:chevron-left" />
      </button>
      <div
        id="image-list"
        class="flex gap-[10px] lg:gap-[16px] mb-[15px] lg:mb-[30px] overflow-x-auto image-list w-full"
      >
        {
          instaPost.map((post) => (
            <a
              href={`${post.slug}`}
              target="_blank"
              rel="nofollow noopener"
              class="h-[280px] w-[280px] lg:h-[350px] lg:w-[350px] shrink-0 group relative overflow-hidden"
            >
              <img
                class="h-full w-full object-contain"
                loading="lazy"
                src={`${post.image}`}
                alt=""
              />
              <div class="absolute inset-0 bg-black opacity-0 group-hover:opacity-80 duration-1000 transform translate-y-full group-hover:translate-y-[80%] transition-transform">
                <p class="text-white text-center mt-2">
                  {post.content.slice(0, 100)}
                </p>
              </div>
            </a>
          ))
        }
      </div>
      <button
        id="next-slide"
        class="absolute top-1/2 h-12 w-12 text-white border-none outline-none bg-black text-4xl cursor-pointer rounded-full -translate-y-1/2 hover:bg-gray-800 -right-5 slide-button"
      >
        <Icon name="mdi:chevron-right" />
      </button>
    </div>

    <div
      class="h-[24px] w-full flex items-center group"
      id="slider-scrollbar"
    >
      <div
        class="h-[2px] w-full bg-[#ccc] relative rounded group-hover:h-[4px] scrollbar-track"
      >
        <div
          id="scrollbar-thumb"
          class="absolute h-full w-1/2 bg-black rounded cursor-grab active:cursor-grabbing active:h-[8px] active:-top-[2px] after:content-[''] after:absolute after:left-0 after:right-0 after:-top-[10px] after:-bottom-[10px]"
        >
        </div>
      </div>
    </div>
  </section>
</div>

<style is:inline>
  .image-list {
    scrollbar-width: none;
  }

  .image-list::-webkit-scrollbar {
    display: none;
  }

  @media (max-width: 1023px) {
    .slide-button {
      display: none !important;
    }
  }
</style>
<script>
  const imageList = document.querySelector('#image-list');

  const slideButtons = document.querySelectorAll<HTMLElement>('.slide-button');
  const sliderScrollbar = document.getElementById('slider-scrollbar');
  const scrollbarThumb = document.getElementById(
    'scrollbar-thumb'
  ) as HTMLElement;
  const maxScrollLeft = imageList.scrollWidth - imageList.clientWidth;

  scrollbarThumb.addEventListener('mousedown', (e) => {
    const startX = e.clientX;
    const thumbPosition = scrollbarThumb.offsetLeft;

    // Update thumb position on mouse move
    const handleMouseMove = (e) => {
      const deltaX = e.clientX - startX;
      const newThumbPosition = thumbPosition + deltaX;
      const maxThumbPosition =
        sliderScrollbar.getBoundingClientRect().width -
        scrollbarThumb.offsetWidth;

      const boundedPosition = Math.max(
        0,
        Math.min(maxThumbPosition, newThumbPosition)
      );
      const scrollPosition =
        (boundedPosition / maxThumbPosition) * maxScrollLeft;
      scrollbarThumb.style.left = `${boundedPosition}px`;
      imageList.scrollLeft = scrollPosition;
    };

    // Remove eventListeners on mouse up
    const handleMouseUp = () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
  });

  // Slide images according to the slide buttons click
  slideButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const direction = button.id === 'prev-slide' ? -1 : +1;
      const scrollAmount = imageList.clientWidth * direction;
      imageList.scrollBy({ left: scrollAmount, behavior: 'smooth' });
    });
  });

  const handleSlideButtons = () => {
    slideButtons[0].style.display =
      imageList.scrollLeft <= 0 ? 'none' : 'block';
    slideButtons[1].style.display =
      imageList.scrollLeft >= maxScrollLeft ? 'none' : 'block';
  };

  // Uupdate scollbar thumb position based on image scroll
  const updateScrollThumbPosition = () => {
    const scrollPosition = imageList.scrollLeft;
    const thumbPosition =
      (scrollPosition / maxScrollLeft) *
      (sliderScrollbar.clientWidth - scrollbarThumb.offsetWidth);
    scrollbarThumb.style.left = `${thumbPosition}px`;
  };

  imageList.addEventListener('scroll', () => {
    handleSlideButtons();
    updateScrollThumbPosition();
  });
</script>
