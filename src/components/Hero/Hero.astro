---
import { Icon } from 'astro-icon';
import { getSlides } from '@services/slides';

const resp = await getSlides();
const slides = resp.filter((slide) => slide.type === 'Hero');
const bgHero = resp.filter((slide) => slide.type === 'bg-hero');
---

<header
  style={{ backgroundImage: `url(${bgHero[0].image})` }}
  class="bg-center bg-no-repeat h-fit md:h-[450px] w-full"
>
  <div class="glide max-w-[1440px] mx-auto">
    <div
      class="glide__track"
      data-glide-el="track"
    >
      <ul class="glide__slides h-full md:h-[450px]">
        {
          slides.map((slide) => (
            <li class="glide__slide h-full relative">
              <article>
                <div class="overflow-hidden w-full h-[450px]">
                  <img
                    class="glide__img h-full w-full object-contain"
                    src={slide.image}
                    alt={slide.altImage}
                  />
                </div>
              </article>
            </li>
          ))
        }
      </ul>
    </div>

    <div
      class="glide__arrows"
      data-glide-el="controls"
    >
      <button
        class="glide__arrow glide__arrow--left"
        data-glide-dir="<"
      >
        <Icon
          name="mdi:arrow-left"
          class="w-6"
        />
      </button>
      <button
        class="glide__arrow glide__arrow--right"
        data-glide-dir=">"
      >
        <Icon
          name="mdi:arrow-right"
          class="w-6"
        /></button
      >
    </div>

    <div
      class="glide__bullets"
      data-glide-el="controls[nav]"
    >
      {
        slides.map((pet) => (
          <button
            class="glide__bullet"
            data-glide-dir={`=${pet.id}`}
          />
        ))
      }
    </div>
  </div>
</header>

<script>
  import Glide from '@glidejs/glide';

  new Glide('.glide', {
    type: 'carousel',
    startAt: 0,
    // perView: 3,
    // gap: 40,
    autoplay: 3000,
    hoverpause: true,
    swipeThreshold: 80,
    focusAt: 'center',
    // rewind: true,
    // animationDuration: 1000,
    rewindDuration: 3000,
    animationTimingFunc: 'linear', // easy, easy-in, easy-out, easy-in-out, bounce
    // peek: {
    //   before: 100,
    //   after: 50,
    // },
    // breakpoints: {
    //   1024: {
    //     perView: 2,
    //   },
    //   600: {
    //     perView: 1,
    //   },
    // },
  }).mount();
</script>
